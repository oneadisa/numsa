---
import PageLayout from '../../layouts/PageLayout.astro';
import { Icon } from 'astro-icon/components';

// Define the PDF files that can be viewed with their Google Drive links
export async function getStaticPaths() {
  return [
    { 
      params: { filename: 'MEDICAL MINDSCAPE 1.pdf' },
      props: { 
        driveId: '1tbDdhQoOxKh8shu7_D0j7IHzcsjPEhSI',
        title: 'MEDICAL MINDSCAPE EDITION 1'
      }
    },
    { 
      params: { filename: 'NUMSA Journal (3)_compressed_250420_022657.pdf' },
      props: { 
        driveId: '1SUkX1pkLmMLrv16vvoi2lIV8lCqfP1mO',
        title: 'MEDICAL NEXUS MAGAZINE'
      }
    },
    { 
      params: { filename: 'NUMSA MAGAZINE 2 (1)_compressed_250420_022813.pdf' },
      props: { 
        driveId: '1aR28qcmaIcu5mNjTlxcBQpNSku3QKD6S',
        title: 'MEDICAL MINDSCAPE EDITION 2'
      }
    }
  ];
}

const file = Astro.params.filename;
const fileName = file ? decodeURIComponent(file) : '';
const { driveId, title } = Astro.props;

const metadata = {
  title: `Viewing ${title}`,
  description: `PDF Viewer for ${title}`,
};
---

<PageLayout metadata={metadata}>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <!-- Header -->
    <header class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
      <div class="container mx-auto px-4 py-3 sm:py-4">
        <!-- Mobile Layout -->
        <div class="block lg:hidden">
          <div class="flex items-center justify-between mb-3">
            <a href="/publications" class="flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors">
              <Icon name="tabler:chevron-left" class="w-5 h-5" />
              <span class="font-medium text-sm">Back</span>
            </a>
            <div class="flex gap-2">
              <button 
                id="fullscreen-btn-mobile"
                class="p-3 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 active:bg-gray-300 dark:active:bg-gray-500 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95 touch-manipulation"
                title="Toggle Fullscreen"
                aria-label="Toggle Fullscreen"
              >
                <Icon name="tabler:maximize" class="w-5 h-5" id="mobile-icon" />
              </button>
              <a 
                href={`https://drive.google.com/uc?export=download&id=${driveId}`}
                class="p-3 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 active:bg-blue-800 dark:active:bg-blue-700 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95 touch-manipulation flex items-center justify-center"
                download
                title="Download PDF"
                aria-label="Download PDF"
              >
                <Icon name="tabler:download" class="w-5 h-5" />
              </a>
            </div>
          </div>
          <h1 class="text-base font-semibold text-gray-900 dark:text-white truncate">
            {title}
          </h1>
        </div>
        
        <!-- Tablet Layout -->
        <div class="hidden lg:block xl:hidden">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-4">
              <a href="/publications" class="flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors">
                <Icon name="tabler:chevron-left" class="w-5 h-5" />
                <span class="font-medium">Back to Publications</span>
              </a>
            </div>
            <div class="flex items-center gap-4">
              <h1 class="text-lg font-semibold text-gray-900 dark:text-white truncate max-w-md">
                {title}
              </h1>
              <div class="flex gap-3">
                <button 
                  id="fullscreen-btn-tablet"
                  class="px-4 py-2.5 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 active:bg-gray-300 dark:active:bg-gray-500 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95 touch-manipulation flex items-center gap-2"
                  title="Toggle Fullscreen"
                  aria-label="Toggle Fullscreen"
                >
                  <Icon name="tabler:maximize" class="w-4 h-4" id="tablet-icon" />
                  <span class="text-sm font-medium" id="tablet-text">Fullscreen</span>
                </button>
                <a 
                  href={`https://drive.google.com/uc?export=download&id=${driveId}`}
                  class="px-4 py-2.5 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 active:bg-blue-800 dark:active:bg-blue-700 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95 touch-manipulation flex items-center gap-2"
                  download
                  aria-label="Download PDF"
                >
                  <Icon name="tabler:download" class="w-4 h-4" />
                  <span class="text-sm font-medium">Download</span>
                </a>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Desktop Layout -->
        <div class="hidden xl:flex items-center justify-between">
          <div class="flex items-center gap-4">
            <a href="/publications" class="flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors">
              <Icon name="tabler:chevron-left" class="w-5 h-5" />
              <span class="font-medium">Back to Publications</span>
            </a>
          </div>
          <div class="flex items-center gap-4">
            <h1 class="text-lg font-semibold text-gray-900 dark:text-white truncate max-w-md">
              {title}
            </h1>
            <div class="flex gap-3">
              <button 
                id="fullscreen-btn"
                class="px-5 py-2.5 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 active:bg-gray-300 dark:active:bg-gray-500 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95 touch-manipulation flex items-center gap-2"
                title="Toggle Fullscreen"
                aria-label="Toggle Fullscreen"
              >
                <Icon name="tabler:maximize" class="w-4 h-4" id="desktop-icon" />
                <span class="font-medium" id="desktop-text">Fullscreen</span>
              </button>
              <a 
                href={`https://drive.google.com/uc?export=download&id=${driveId}`}
                class="px-5 py-2.5 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 active:bg-blue-800 dark:active:bg-blue-700 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95 touch-manipulation flex items-center gap-2"
                download
                aria-label="Download PDF"
              >
                <Icon name="tabler:download" class="w-4 h-4" />
                <span class="font-medium">Download</span>
              </a>
            </div>
          </div>
        </div>
      </div>
    </header>

    <!-- PDF Viewer -->
    <main class="container mx-auto px-4 py-6">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
        {fileName && driveId ? (
          <div class="w-full h-[calc(100vh-200px)] sm:h-[calc(100vh-280px)] min-h-[500px] sm:min-h-[600px] relative">
            <!-- Google Drive Embedded Viewer -->
            <iframe
              id="pdf-viewer"
              src={`https://drive.google.com/file/d/${driveId}/preview`}
              class="w-full h-full border-0"
              title={`Viewing ${title}`}
              allowfullscreen
            ></iframe>
            
            <!-- Loading indicator -->
            <div id="loading-indicator" class="absolute inset-0 bg-white dark:bg-gray-800 flex items-center justify-center">
              <div class="text-center">
                <div class="w-16 h-16 border-4 border-blue-200 dark:border-gray-600 rounded-full animate-spin mx-auto mb-4">
                  <div class="absolute top-0 left-0 w-16 h-16 border-4 border-transparent border-t-blue-600 dark:border-t-blue-400 rounded-full animate-spin"></div>
                </div>
                <p class="text-gray-600 dark:text-gray-300">Loading PDF viewer...</p>
              </div>
            </div>
          </div>
        ) : (
          <div class="flex items-center justify-center h-[400px]">
            <div class="text-center">
              <Icon name="tabler:file-text" class="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">PDF Not Found</h2>
              <p class="text-gray-600 dark:text-gray-300 mb-4">The requested PDF file could not be found</p>
              <a href="/publications" class="px-6 py-3 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors">
                Go to Publications
              </a>
            </div>
          </div>
        )}
      </div>
    </main>
  </div>
</PageLayout>

<script>
  if (typeof window !== 'undefined') {
    let loadCheckInterval: ReturnType<typeof setInterval>;
    let observer: IntersectionObserver;
    
    // Function to initialize the PDF viewer
    const initializePDFViewer = () => {
      const fullscreenBtn = document.getElementById('fullscreen-btn');
      const fullscreenBtnMobile = document.getElementById('fullscreen-btn-mobile');
      const fullscreenBtnTablet = document.getElementById('fullscreen-btn-tablet');
      const pdfViewer = document.getElementById('pdf-viewer') as HTMLIFrameElement;
      const loadingIndicator = document.getElementById('loading-indicator');
      
      if (!pdfViewer || !loadingIndicator) return;
      
      // Clear any existing intervals
      if (loadCheckInterval) {
        clearInterval(loadCheckInterval);
      }
      
      // Reset loading indicator
      loadingIndicator.style.display = 'flex';
      
      // Get the current driveId from the iframe src to detect changes
      const currentSrc = pdfViewer.src;
      const currentDriveId = currentSrc.match(/\/d\/([^/]+)\/preview/)?.[1];
      
      // If the driveId has changed, reload the iframe
      if (currentDriveId && currentDriveId !== (window as any).currentDriveId) {
        console.log('DriveId changed, reloading iframe');
        // Force reload the iframe by updating its src
        const newSrc = pdfViewer.src;
        pdfViewer.src = '';
        setTimeout(() => {
          pdfViewer.src = newSrc;
        }, 100);
        // Reset the current driveId
        (window as any).currentDriveId = currentDriveId;
      } else if (!(window as any).currentDriveId) {
        // First time loading, store the driveId
        (window as any).currentDriveId = currentDriveId;
      }
      
      // Function to toggle fullscreen
      const toggleFullscreen = () => {
        if (!pdfViewer) return;
        
        if (!document.fullscreenElement) {
          if (pdfViewer.requestFullscreen) {
            pdfViewer.requestFullscreen();
          } else if ((pdfViewer as any).webkitRequestFullscreen) {
            (pdfViewer as any).webkitRequestFullscreen();
          }
        } else {
          if (document.exitFullscreen) {
            document.exitFullscreen();
          } else if ((document as any).webkitExitFullscreen) {
            (document as any).webkitExitFullscreen();
          }
        }
      };
      
      // Add event listeners for fullscreen buttons
      if (fullscreenBtn) {
        fullscreenBtn.removeEventListener('click', toggleFullscreen);
        fullscreenBtn.addEventListener('click', toggleFullscreen);
      }
      if (fullscreenBtnMobile) {
        fullscreenBtnMobile.removeEventListener('click', toggleFullscreen);
        fullscreenBtnMobile.addEventListener('click', toggleFullscreen);
      }
      if (fullscreenBtnTablet) {
        fullscreenBtnTablet.removeEventListener('click', toggleFullscreen);
        fullscreenBtnTablet.addEventListener('click', toggleFullscreen);
      }
      
      // Hide loading indicator when iframe loads
      const hideLoadingIndicator = () => {
        if (loadingIndicator && loadingIndicator.style.display !== 'none') {
          console.log('Hiding loading indicator');
          loadingIndicator.style.display = 'none';
        }
        if (loadCheckInterval) {
          clearInterval(loadCheckInterval);
        }
      };
      
      // Method 1: Listen for iframe load event
      pdfViewer.addEventListener('load', () => {
        console.log('Iframe load event fired');
        hideLoadingIndicator();
      });
      
      // Method 2: Check iframe content periodically
      let loadAttempts = 0;
      const maxAttempts = 20; // 10 seconds total
      
      loadCheckInterval = setInterval(() => {
        loadAttempts++;
        
        try {
          // Check if iframe has content
          const iframeDoc = (pdfViewer as HTMLIFrameElement).contentDocument;
          const iframeBody = iframeDoc?.body;
          
          if (iframeBody && iframeBody.children.length > 0) {
            console.log('Iframe content detected, hiding loading indicator');
            hideLoadingIndicator();
            return;
          }
          
          // Check if iframe src has changed (Google Drive sometimes redirects)
          const currentSrc = (pdfViewer as HTMLIFrameElement).src;
          if (currentSrc && !currentSrc.includes('preview')) {
            console.log('Iframe src changed, hiding loading indicator');
            hideLoadingIndicator();
            return;
          }
          
          // Force hide after max attempts
          if (loadAttempts >= maxAttempts) {
            console.log('Max attempts reached, hiding loading indicator');
            hideLoadingIndicator();
          }
        } catch (error) {
          // Cross-origin error, which is expected with Google Drive
          // This means the iframe is loading properly
          if (loadAttempts >= 3) {
            console.log('Cross-origin access detected, iframe is loading, hiding loading indicator');
            hideLoadingIndicator();
          }
        }
      }, 500); // Check every 500ms
      
      // Method 3: Fallback timeout
      setTimeout(() => {
        hideLoadingIndicator();
      }, 3000); // 3 seconds
      
      // Method 4: Hide loading indicator when iframe becomes visible
      if (observer) {
        observer.disconnect();
      }
      
      observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting && entry.intersectionRatio > 0.1) {
            // Iframe is visible, give it a moment then hide loading indicator
            setTimeout(() => {
              hideLoadingIndicator();
            }, 1000);
            observer.disconnect();
          }
        });
      });
      
      observer.observe(pdfViewer);
      
      // Method 5: Aggressive timeout for Google Drive
      setTimeout(() => {
        hideLoadingIndicator();
      }, 1500); // 1.5 seconds - Google Drive should be showing content by then
    };
    
    // Function to cleanup resources
    const cleanup = () => {
      if (loadCheckInterval) {
        clearInterval(loadCheckInterval);
      }
      if (observer) {
        observer.disconnect();
      }
    };
    
    // Initialize on first load
    initializePDFViewer();
    
    // Handle Astro page transitions
    document.addEventListener('astro:page-load', () => {
      console.log('Astro page loaded, re-initializing PDF viewer');
      // Small delay to ensure DOM is ready
      setTimeout(() => {
        initializePDFViewer();
      }, 100);
    });
    
    // Handle browser back/forward navigation
    window.addEventListener('popstate', () => {
      console.log('Popstate event, re-initializing PDF viewer');
      // Small delay to ensure DOM is ready
      setTimeout(() => {
        initializePDFViewer();
      }, 100);
    });
    
    // Handle fullscreen change events
    document.addEventListener('fullscreenchange', () => {
      const isFullscreen = !!document.fullscreenElement;
      
      // Update desktop button
      const fullscreenBtn = document.getElementById('fullscreen-btn');
      if (fullscreenBtn) {
        const desktopIcon = fullscreenBtn.querySelector('#desktop-icon');
        const desktopText = fullscreenBtn.querySelector('#desktop-text');
        
        if (desktopIcon) {
          desktopIcon.setAttribute('name', isFullscreen ? 'tabler:minimize' : 'tabler:maximize');
        }
        if (desktopText) {
          desktopText.textContent = isFullscreen ? 'Exit Fullscreen' : 'Fullscreen';
        }
      }
      
      // Update mobile button
      const fullscreenBtnMobile = document.getElementById('fullscreen-btn-mobile');
      if (fullscreenBtnMobile) {
        const mobileIcon = fullscreenBtnMobile.querySelector('#mobile-icon');
        if (mobileIcon) {
          mobileIcon.setAttribute('name', isFullscreen ? 'tabler:minimize' : 'tabler:maximize');
        }
      }
      
      // Update tablet button
      const fullscreenBtnTablet = document.getElementById('fullscreen-btn-tablet');
      if (fullscreenBtnTablet) {
        const tabletIcon = fullscreenBtnTablet.querySelector('#tablet-icon');
        const tabletText = fullscreenBtnTablet.querySelector('#tablet-text');
        
        if (tabletIcon) {
          tabletIcon.setAttribute('name', isFullscreen ? 'tabler:minimize' : 'tabler:maximize');
        }
        if (tabletText) {
          tabletText.textContent = isFullscreen ? 'Exit Fullscreen' : 'Fullscreen';
        }
      }
    });
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', cleanup);
  }
</script>