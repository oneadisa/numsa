---
import PageLayout from '../../layouts/PageLayout.astro';
import { Icon } from 'astro-icon/components';

// Define the PDF files that can be viewed
export async function getStaticPaths() {
  return [
    { params: { filename: 'MEDICAL MINDSCAPE 1.pdf' } },
    { params: { filename: 'NUMSA Journal (3)_compressed_250420_022657.pdf' } },
    { params: { filename: 'NUMSA MAGAZINE 2 (1)_compressed_250420_022813.pdf' } }
  ];
}

const file = Astro.params.filename;
const fileName = file ? decodeURIComponent(file) : '';

const metadata = {
  title: `Viewing ${fileName}`,
  description: `PDF Viewer for ${fileName}`,
};
---

<PageLayout metadata={metadata}>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <!-- Header -->
    <header class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
      <div class="container mx-auto px-4 py-3 sm:py-4">
        <!-- Mobile Layout -->
        <div class="block sm:hidden">
          <div class="flex items-center justify-between mb-3">
            <a href="/publications" class="flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors">
              <Icon name="tabler:chevron-left" class="w-5 h-5" />
              <span class="font-medium text-sm">Back</span>
            </a>
            <div class="flex gap-2">
              <button 
                id="fullscreen-btn-mobile"
                class="p-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                title="Toggle Fullscreen"
              >
                <Icon name="tabler:maximize" class="w-4 h-4" />
              </button>
              <a 
                href={`/documents/publications/${fileName}`}
                class="p-2 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors"
                download
                title="Download PDF"
              >
                <Icon name="tabler:download" class="w-4 h-4" />
              </a>
            </div>
          </div>
          <h1 class="text-base font-semibold text-gray-900 dark:text-white truncate">
            {fileName}
          </h1>
        </div>
        
        <!-- Desktop Layout -->
        <div class="hidden sm:flex items-center justify-between">
          <div class="flex items-center gap-4">
            <a href="/publications" class="flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors">
              <Icon name="tabler:chevron-left" class="w-5 h-5" />
              <span class="font-medium">Back to Publications</span>
            </a>
          </div>
          <div class="flex items-center gap-4">
            <h1 class="text-lg font-semibold text-gray-900 dark:text-white truncate max-w-md">
              {fileName}
            </h1>
            <div class="flex gap-2">
              <button 
                id="fullscreen-btn"
                class="px-3 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors flex items-center gap-2"
                title="Toggle Fullscreen"
              >
                <Icon name="tabler:maximize" class="w-4 h-4" />
              </button>
              <a 
                href={`/documents/publications/${fileName}`}
                class="px-4 py-2 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors flex items-center gap-2"
                download
              >
                <Icon name="tabler:download" class="w-4 h-4" />
                Download
              </a>
            </div>
          </div>
        </div>
      </div>
    </header>

    <!-- PDF Viewer -->
    <main class="container mx-auto px-4 py-6">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
        <!-- PDF Controls -->
        <!-- <div class="bg-gray-50 dark:bg-gray-700 px-4 py-3 border-b border-gray-200 dark:border-gray-600">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-4">
              <button 
                id="prev-page"
                class="px-3 py-2 bg-white dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-500 transition-colors flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled
              >
                <Icon name="tabler:chevron-left" class="w-4 h-4" />
                Previous
              </button>
              <span id="page-info" class="text-sm text-gray-600 dark:text-gray-400">
                Page <span id="current-page">1</span> of <span id="total-pages">-</span>
              </span>
              <button 
                id="next-page"
                class="px-3 py-2 bg-white dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-500 transition-colors flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled
              >
                Next
                <Icon name="tabler:chevron-right" class="w-4 h-4" />
              </button>
            </div>
            <div class="flex items-center gap-2">
              <button 
                id="zoom-out"
                class="px-3 py-2 bg-white dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-500 transition-colors"
                title="Zoom Out"
              >
                <Icon name="tabler:minus" class="w-4 h-4" />
              </button>
              <span id="zoom-level" class="text-sm text-gray-600 dark:text-gray-400 px-2">100%</span>
              <button 
                id="zoom-in"
                class="px-3 py-2 bg-white dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-500 transition-colors"
                title="Zoom In"
              >
                <Icon name="tabler:plus" class="w-4 h-4" />
              </button>
            </div>
          </div>
        </div> -->

        <div id="pdf-viewer" class="w-full h-[calc(100vh-200px)] sm:h-[calc(100vh-280px)] min-h-[500px] sm:min-h-[600px] relative">
          {fileName ? (
            <div class="relative w-full h-full">
              <!-- Progressive PDF Viewer Container -->
              <div id="pdf-container" class="w-full h-full overflow-auto bg-gray-100 dark:bg-gray-800">
                <!-- PDF pages will be rendered here progressively -->
                <div id="pdf-pages" class="space-y-4 p-4">
                  <!-- Loading indicator for first page -->
                  <div class="flex items-center justify-center py-20">
                    <div class="text-center">
                      <div class="w-16 h-16 border-4 border-blue-200 dark:border-gray-600 rounded-full animate-spin mx-auto mb-4">
                        <div class="absolute top-0 left-0 w-16 h-16 border-4 border-transparent border-t-blue-600 dark:border-t-blue-400 rounded-full animate-spin"></div>
                      </div>
                      <p class="text-gray-600 dark:text-gray-300">Loading first page...</p>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Loading overlay for initial setup -->
              <div id="loading-overlay" class="absolute inset-0 bg-white dark:bg-gray-800 bg-opacity-95 flex items-center justify-center backdrop-blur-sm transition-opacity duration-300">
                <div class="text-center max-w-md mx-auto p-8">
                  <!-- Modern loading spinner -->
                  <div class="relative mb-6">
                    <div class="w-16 h-16 border-4 border-blue-200 dark:border-gray-600 rounded-full animate-spin mx-auto">
                      <div class="absolute top-0 left-0 w-16 h-16 border-4 border-transparent border-t-blue-600 dark:border-t-blue-400 rounded-full animate-spin"></div>
                    </div>
                    <div class="absolute inset-0 flex items-center justify-center">
                      <Icon name="tabler:file-text" class="w-6 h-6 text-blue-600 dark:text-blue-400" />
                    </div>
                  </div>
                  
                  <!-- Loading text with animation -->
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2 animate-pulse">
                    Setting Up PDF Viewer
                  </h3>
                  <p class="text-gray-600 dark:text-gray-300 mb-4">
                    Preparing {fileName} for progressive loading...
                  </p>
                  <div class="text-xs text-gray-500 dark:text-gray-400 mb-4">
                    <span id="file-info">Loading file information...</span>
                  </div>
                  
                  <!-- Progress bar -->
                  <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mb-4">
                    <div id="progress-bar" class="bg-gradient-to-r from-blue-500 to-blue-600 h-2 rounded-full transition-all duration-300 ease-out" style="width: 0%"></div>
                  </div>
                  
                  <!-- Loading steps -->
                  <div class="space-y-2 text-sm text-gray-500 dark:text-gray-400">
                    <div id="step-1" class="flex items-center gap-2">
                      <div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                      <span>Initializing viewer...</span>
                    </div>
                    <div id="step-2" class="flex items-center gap-2 opacity-50">
                      <div class="w-2 h-2 bg-gray-300 dark:bg-gray-600 rounded-full"></div>
                      <span>Loading PDF content...</span>
                    </div>
                    <div id="step-3" class="flex items-center gap-2 opacity-50">
                      <div class="w-2 h-2 bg-gray-300 dark:bg-gray-600 rounded-full"></div>
                      <span>Rendering pages...</span>
                    </div>
                  </div>
                  
                  <!-- Progressive loading note -->
                  <div class="mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                    <p class="text-xs text-green-700 dark:text-green-300">
                      <Icon name="tabler:lightbulb" class="w-3 h-3 inline mr-1" />
                      Pages will load progressively - you can start scrolling immediately!
                    </p>
                  </div>
                </div>
              </div>
              
              <!-- Error overlay with better fallback options -->
              <div id="error-overlay" class="hidden absolute inset-0 bg-white dark:bg-gray-800 bg-opacity-90 flex items-center justify-center">
                <div class="text-center max-w-lg mx-auto p-8">
                  <Icon name="tabler:alert-circle" class="w-16 h-16 text-red-500 mx-auto mb-4" />
                  <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">PDF Loading Failed</h2>
                  <p class="text-gray-600 dark:text-gray-300 mb-4">
                    The PDF file could not be loaded in the browser. This is common with large files on production servers.
                  </p>
                  
                  <!-- Alternative viewing options -->
                  <div class="space-y-3 mb-6">
                    <div class="p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                      <h3 class="font-medium text-gray-900 dark:text-white mb-2">Try these alternatives:</h3>
                      <ul class="text-sm text-gray-600 dark:text-gray-300 space-y-1">
                        <li>• Download and view locally</li>
                        <li>• Open in a new tab</li>
                        <li>• Use a different browser</li>
                        <li>• Check your internet connection</li>
                      </ul>
                    </div>
                  </div>
                  
                  <div class="flex flex-col sm:flex-row gap-3 justify-center">
                    <a 
                      href={`/documents/publications/${fileName}`}
                      target="_blank"
                      class="px-6 py-3 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors inline-flex items-center gap-2"
                    >
                      <Icon name="tabler:external-link" class="w-4 h-4" />
                      Open in New Tab
                    </a>
                    <a 
                      href={`/documents/publications/${fileName}`}
                      class="px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors inline-flex items-center gap-2"
                      download
                    >
                      <Icon name="tabler:download" class="w-4 h-4" />
                      Download PDF
                    </a>
                    <button 
                      id="retry-btn"
                      class="px-6 py-3 bg-gray-600 dark:bg-gray-500 text-white rounded-lg hover:bg-gray-700 dark:hover:bg-gray-600 transition-colors inline-flex items-center gap-2"
                    >
                      <Icon name="tabler:refresh" class="w-4 h-4" />
                      Retry
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div class="flex items-center justify-center h-full">
              <div class="text-center">
                <Icon name="tabler:file-text" class="w-16 h-16 text-gray-400 mx-auto mb-4" />
                <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">No PDF Selected</h2>
                <p class="text-gray-600 dark:text-gray-300 mb-4">Please select a PDF file to view</p>
                <a href="/publications" class="px-6 py-3 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors">
                  Go to Publications
                </a>
              </div>
            </div>
          )}
        </div>
      </div>
    </main>
  </div>
</PageLayout>

<script>
  // PDF.js will be loaded from CDN for progressive loading
  
  if (typeof window !== 'undefined') {
    let currentLoadingOverlay: HTMLElement | null = null;
    let currentProgressBar: HTMLElement | null = null;
    let currentStep2: HTMLElement | null = null;
    let currentStep3: HTMLElement | null = null;
    let currentFileInfo: HTMLElement | null = null;
    let currentProgressInterval: ReturnType<typeof setInterval> | null = null;
    let currentFallbackTimeout: ReturnType<typeof setTimeout> | null = null;
    let currentTimeInterval: ReturnType<typeof setInterval> | null = null;
    
    // Function to initialize progressive PDF viewer
    const initializeProgressivePDFViewer = () => {
      // Clean up any existing intervals/timeouts
      if (currentProgressInterval) clearInterval(currentProgressInterval);
      if (currentFallbackTimeout) clearTimeout(currentFallbackTimeout);
      if (currentQuickFallback) clearTimeout(currentQuickFallback);
      if (currentTimeInterval) clearInterval(currentTimeInterval);
      
      // Get current elements
      const loadingOverlay = document.getElementById('loading-overlay');
      const progressBar = document.getElementById('progress-bar');
      const step1 = document.getElementById('step-1');
      const step2 = document.getElementById('step-2');
      const step3 = document.getElementById('step-3');
      const fileInfo = document.getElementById('file-info');
      const pdfPages = document.getElementById('pdf-pages');
      
      if (!loadingOverlay || !pdfPages) return;
      
      // Store references
      currentLoadingOverlay = loadingOverlay;
      currentProgressBar = progressBar;
      currentStep1 = step1;
      currentStep2 = step2;
      currentStep3 = step3;
      currentFileInfo = fileInfo;
      
      // Get filename from URL path
      const pathSegments = window.location.pathname.split('/');
      const currentFileName = decodeURIComponent(pathSegments[pathSegments.length - 1]);
      
      if (!currentFileName) return;
      
      // Function to hide loading overlay
      const hideLoadingOverlay = () => {
        if (currentLoadingOverlay) {
          currentLoadingOverlay.style.opacity = '0';
          setTimeout(() => {
            if (currentLoadingOverlay) {
              currentLoadingOverlay.style.display = 'none';
            }
          }, 300);
        }
      };
      
      // Simulate file size and load time
      const fileSizes = {
        'MEDICAL MINDSCAPE 1.pdf': '2.4 MB',
        'NUMSA Journal (3)_compressed_250420_022657.pdf': '1.8 MB',
        'NUMSA MAGAZINE 2 (1)_compressed_250420_022813.pdf': '3.1 MB'
      };
      
      const fileSize = fileSizes[currentFileName] || 'Unknown size';
      const estimatedTime = Math.floor(Math.random() * 3) + 2; // 2-4 seconds
      
      // Reset loading overlay
      if (currentLoadingOverlay) {
        currentLoadingOverlay.style.opacity = '1';
        currentLoadingOverlay.style.display = 'flex';
      }
      
      // Update file info
      if (currentFileInfo) {
        currentFileInfo.textContent = `${fileSize} • Estimated load time: ${estimatedTime}s`;
        
        // Update loading time in real-time
        let elapsedTime = 0;
        currentTimeInterval = setInterval(() => {
          elapsedTime++;
          if (currentFileInfo) {
            currentFileInfo.textContent = `${fileSize} • Loading... ${elapsedTime}s`;
          }
        }, 1000);
      }
      
      // Reset progress bar
      if (currentProgressBar) {
        currentProgressBar.style.width = '0%';
      }
      
      // Reset steps
      if (currentStep2) {
        currentStep2.classList.add('opacity-50');
        currentStep2.querySelector('div')?.classList.remove('bg-blue-500', 'animate-pulse');
      }
      if (currentStep3) {
        currentStep3.classList.add('opacity-50');
        currentStep3.querySelector('div')?.classList.remove('bg-blue-500', 'animate-pulse', 'bg-green-500');
      }
      
      // Simple progress for initial setup
      let progress = 0;
      currentProgressInterval = setInterval(() => {
        progress += 20;
        if (progress > 90) progress = 90;
        
        if (currentProgressBar) {
          currentProgressBar.style.width = `${progress}%`;
        }
        
        // Update steps
        if (progress > 30 && currentStep2) {
          currentStep2.classList.remove('opacity-50');
          currentStep2.querySelector('div')?.classList.add('bg-blue-500', 'animate-pulse');
        }
        if (progress > 60 && currentStep3) {
          currentStep3.classList.remove('opacity-50');
          currentStep3.querySelector('div')?.classList.add('bg-blue-500', 'animate-pulse');
        }
      }, 200);
      
      // Hide loading overlay after 1.5 seconds to show progressive loading
      currentFallbackTimeout = setTimeout(() => {
        console.log('Setup complete, showing progressive loading');
        if (currentProgressInterval) clearInterval(currentProgressInterval);
        hideLoadingOverlay();
        // Start progressive PDF loading
        loadPDFProgressively(currentFileName, pdfPages);
      }, 1500);
    };
    
    // Function to load PDF progressively
    const loadPDFProgressively = async (filename: string, container: HTMLElement) => {
      try {
        const pdfUrl = `/documents/publications/${filename}`;
        console.log('Starting progressive PDF loading:', pdfUrl);
        
        // Load the PDF document using global PDF.js
        if (typeof window !== 'undefined' && (window as any).pdfjsLib) {
          const pdfjsLib = (window as any).pdfjsLib;
          const loadingTask = pdfjsLib.getDocument(pdfUrl);
          const pdf = await loadingTask.promise;
        } else {
          throw new Error('PDF.js library not loaded');
        }
        
        console.log('PDF loaded, total pages:', pdf.numPages);
        
        // Clear loading indicator
        container.innerHTML = '';
        
        // Load pages progressively
        for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
          try {
            // Load page
            const page = await pdf.getPage(pageNum);
            
            // Create canvas for the page
            const canvas = document.createElement('canvas');
            const context = canvas.getContext('2d');
            
            if (!context) continue;
            
            // Set canvas size (scale for better quality)
            const viewport = page.getViewport({ scale: 1.5 });
            canvas.width = viewport.width;
            canvas.height = viewport.height;
            
            // Render page to canvas
            const renderContext = {
              canvasContext: context,
              viewport: viewport
            };
            
            await page.render(renderContext).promise;
            
            // Create page container
            const pageContainer = document.createElement('div');
            pageContainer.className = 'bg-white dark:bg-gray-700 rounded-lg shadow-lg overflow-hidden';
            pageContainer.innerHTML = `
              <div class="p-4 border-b border-gray-200 dark:border-gray-600">
                <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300">Page ${pageNum}</h3>
              </div>
              <div class="flex justify-center p-4">
                <canvas class="max-w-full h-auto"></canvas>
              </div>
            `;
            
            // Replace the temporary canvas with the rendered one
            const tempCanvas = pageContainer.querySelector('canvas');
            if (tempCanvas) {
              tempCanvas.width = canvas.width;
              tempCanvas.height = canvas.height;
              const tempContext = tempCanvas.getContext('2d');
              if (tempContext) {
                tempContext.drawImage(canvas, 0, 0);
              }
            }
            
            // Add page to container
            container.appendChild(pageContainer);
            
            console.log(`Page ${pageNum} rendered`);
            
            // Small delay to show progressive loading
            await new Promise(resolve => setTimeout(resolve, 100));
            
          } catch (error) {
            console.error(`Error rendering page ${pageNum}:`, error);
            // Add error indicator for failed page
            const errorContainer = document.createElement('div');
            errorContainer.className = 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4';
            errorContainer.innerHTML = `
              <div class="flex items-center gap-2 text-red-700 dark:text-red-300">
                <Icon name="tabler:alert-circle" class="w-4 h-4" />
                <span>Failed to load page ${pageNum}</span>
              </div>
            `;
            container.appendChild(errorContainer);
          }
        }
        
        console.log('Progressive PDF loading complete');
        
      } catch (error) {
        console.error('Error loading PDF:', error);
        // Show error message
        container.innerHTML = `
          <div class="text-center py-20">
            <Icon name="tabler:alert-circle" class="w-16 h-16 text-red-500 mx-auto mb-4" />
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">PDF Loading Failed</h2>
            <p class="text-gray-600 dark:text-gray-300 mb-4">Unable to load the PDF file.</p>
            <a href="/documents/publications/${filename}" target="_blank" class="px-6 py-3 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors">
              Open in New Tab
            </a>
          </div>
        `;
      }
    };
    
    // Initialize on page load
    initializeProgressivePDFViewer();
    
    // Handle Astro navigation events for client-side routing
    document.addEventListener('astro:page-load', () => {
      console.log('Astro page load event detected');
      // Re-initialize PDF viewer on navigation
      setTimeout(() => {
        initializeProgressivePDFViewer();
      }, 100); // Slight delay to ensure DOM is ready
    });
    
    // Handle browser navigation events
    window.addEventListener('popstate', () => {
      console.log('Browser navigation detected');
      // Re-initialize PDF viewer on navigation
      setTimeout(() => {
        initializeProgressivePDFViewer();
      }, 100); // Slight delay to ensure DOM is ready
    });
    
    // Handle before navigation to prevent PDF flash
    document.addEventListener('astro:before-preparation', () => {
      console.log('Astro before preparation - cleaning up');
      // Immediately hide loading overlay to prevent flash
      if (currentLoadingOverlay) {
        currentLoadingOverlay.style.display = 'none';
      }
    });
    
    // Retry button logic
    const retryBtn = document.getElementById('retry-btn');
    if (retryBtn) {
      retryBtn.addEventListener('click', () => {
        console.log('Retry button clicked');
        // Show loading overlay
        if (currentLoadingOverlay) {
          currentLoadingOverlay.style.display = 'flex';
          currentLoadingOverlay.style.opacity = '1';
        }
        // Re-initialize the viewer
        initializeProgressivePDFViewer();
      });
    }
    
    // Cleanup function for navigation
    const cleanup = () => {
      if (currentLoadingOverlay) {
        currentLoadingOverlay.style.display = 'none';
      }
      if (currentProgressInterval) clearInterval(currentProgressInterval);
      if (currentFallbackTimeout) clearTimeout(currentFallbackTimeout);
      if (currentQuickFallback) clearTimeout(currentQuickFallback);
      if (currentTimeInterval) clearInterval(currentTimeInterval);
    };
    
    // Clean up on page unload
    window.addEventListener('beforeunload', cleanup);
  }
</script>