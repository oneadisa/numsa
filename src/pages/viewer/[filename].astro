---
import PageLayout from '../../layouts/PageLayout.astro';
import { Icon } from 'astro-icon/components';

// Define the PDF files that can be viewed
export async function getStaticPaths() {
  return [
    { params: { filename: 'MEDICAL MINDSCAPE 1.pdf' } },
    { params: { filename: 'NUMSA Journal (3)_compressed_250420_022657.pdf' } },
    { params: { filename: 'NUMSA MAGAZINE 2 (1)_compressed_250420_022813.pdf' } }
  ];
}

const file = Astro.params.filename;
const fileName = file ? decodeURIComponent(file) : '';

const metadata = {
  title: `Viewing ${fileName}`,
  description: `PDF Viewer for ${fileName}`,
};
---

<PageLayout metadata={metadata}>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <!-- Header -->
    <header class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
      <div class="container mx-auto px-4 py-3 sm:py-4">
        <!-- Mobile Layout -->
        <div class="block sm:hidden">
          <div class="flex items-center justify-between mb-3">
            <a href="/publications" class="flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors">
              <Icon name="tabler:chevron-left" class="w-5 h-5" />
              <span class="font-medium text-sm">Back</span>
            </a>
            <div class="flex gap-2">
              <button 
                id="fullscreen-btn-mobile"
                class="p-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                title="Toggle Fullscreen"
              >
                <Icon name="tabler:maximize" class="w-4 h-4" />
              </button>
              <a 
                href={`/documents/publications/${fileName}`}
                class="p-2 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors"
                download
                title="Download PDF"
              >
                <Icon name="tabler:download" class="w-4 h-4" />
              </a>
            </div>
          </div>
          <h1 class="text-base font-semibold text-gray-900 dark:text-white truncate">
            {fileName}
          </h1>
        </div>
        
        <!-- Desktop Layout -->
        <div class="hidden sm:flex items-center justify-between">
          <div class="flex items-center gap-4">
            <a href="/publications" class="flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors">
              <Icon name="tabler:chevron-left" class="w-5 h-5" />
              <span class="font-medium">Back to Publications</span>
            </a>
          </div>
          <div class="flex items-center gap-4">
            <h1 class="text-lg font-semibold text-gray-900 dark:text-white truncate max-w-md">
              {fileName}
            </h1>
            <div class="flex gap-2">
              <button 
                id="fullscreen-btn"
                class="px-3 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors flex items-center gap-2"
                title="Toggle Fullscreen"
              >
                <Icon name="tabler:maximize" class="w-4 h-4" />
              </button>
              <a 
                href={`/documents/publications/${fileName}`}
                class="px-4 py-2 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors flex items-center gap-2"
                download
              >
                <Icon name="tabler:download" class="w-4 h-4" />
                Download
              </a>
            </div>
          </div>
        </div>
      </div>
    </header>

    <!-- PDF Viewer -->
    <main class="container mx-auto px-4 py-6">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
        <!-- PDF Controls -->
        <!-- <div class="bg-gray-50 dark:bg-gray-700 px-4 py-3 border-b border-gray-200 dark:border-gray-600">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-4">
              <button 
                id="prev-page"
                class="px-3 py-2 bg-white dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-500 transition-colors flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled
              >
                <Icon name="tabler:chevron-left" class="w-4 h-4" />
                Previous
              </button>
              <span id="page-info" class="text-sm text-gray-600 dark:text-gray-400">
                Page <span id="current-page">1</span> of <span id="total-pages">-</span>
              </span>
              <button 
                id="next-page"
                class="px-3 py-2 bg-white dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-500 transition-colors flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled
              >
                Next
                <Icon name="tabler:chevron-right" class="w-4 h-4" />
              </button>
            </div>
            <div class="flex items-center gap-2">
              <button 
                id="zoom-out"
                class="px-3 py-2 bg-white dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-500 transition-colors"
                title="Zoom Out"
              >
                <Icon name="tabler:minus" class="w-4 h-4" />
              </button>
              <span id="zoom-level" class="text-sm text-gray-600 dark:text-gray-400 px-2">100%</span>
              <button 
                id="zoom-in"
                class="px-3 py-2 bg-white dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-500 transition-colors"
                title="Zoom In"
              >
                <Icon name="tabler:plus" class="w-4 h-4" />
              </button>
            </div>
          </div>
        </div> -->

        <div id="pdf-viewer" class="w-full h-[calc(100vh-200px)] sm:h-[calc(100vh-280px)] min-h-[500px] sm:min-h-[600px] relative">
          {fileName ? (
            <div class="relative w-full h-full">
              <!-- Primary PDF iframe -->
              <iframe 
                src={`/documents/publications/${fileName}`}
                class="w-full h-full border-0"
                title="PDF Viewer"
                id="pdf-iframe"
                allowfullscreen
                loading="lazy"
              />
              
              <!-- Fallback content for browsers without iframe support -->
              <noscript>
                <div class="p-4 text-center text-gray-600 dark:text-gray-300">
                  Your browser does not support iframes. 
                  <a href={`/documents/publications/${fileName}`} target="_blank" class="text-blue-600 dark:text-blue-400 hover:underline">
                    Click here to open the PDF in a new tab
                  </a>
                </div>
              </noscript>
              
              <!-- Loading overlay -->
              <div id="loading-overlay" class="absolute inset-0 bg-white dark:bg-gray-800 bg-opacity-95 flex items-center justify-center backdrop-blur-sm transition-opacity duration-300">
                <div class="text-center max-w-md mx-auto p-8">
                  <!-- Modern loading spinner -->
                  <div class="relative mb-6">
                    <div class="w-16 h-16 border-4 border-blue-200 dark:border-gray-600 rounded-full animate-spin mx-auto">
                      <div class="absolute top-0 left-0 w-16 h-16 border-4 border-transparent border-t-blue-600 dark:border-t-blue-400 rounded-full animate-spin"></div>
                    </div>
                    <div class="absolute inset-0 flex items-center justify-center">
                      <Icon name="tabler:file-text" class="w-6 h-6 text-blue-600 dark:text-blue-400" />
                    </div>
                  </div>
                  
                  <!-- Loading text with animation -->
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2 animate-pulse">
                    Loading PDF Viewer
                  </h3>
                  <p class="text-gray-600 dark:text-gray-300 mb-4">
                    Preparing {fileName} for viewing...
                  </p>
                  <div class="text-xs text-gray-500 dark:text-gray-400 mb-4">
                    <span id="file-info">Loading file information...</span>
                  </div>
                  
                  <!-- Progress bar -->
                  <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mb-4">
                    <div id="progress-bar" class="bg-gradient-to-r from-blue-500 to-blue-600 h-2 rounded-full transition-all duration-300 ease-out" style="width: 0%"></div>
                  </div>
                  
                  <!-- Loading steps -->
                  <div class="space-y-2 text-sm text-gray-500 dark:text-gray-400">
                    <div id="step-1" class="flex items-center gap-2">
                      <div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                      <span>Initializing viewer...</span>
                    </div>
                    <div id="step-2" class="flex items-center gap-2 opacity-50">
                      <div class="w-2 h-2 bg-gray-300 dark:bg-gray-600 rounded-full"></div>
                      <span>Loading PDF content...</span>
                    </div>
                    <div id="step-3" class="flex items-center gap-2 opacity-50">
                      <div class="w-2 h-2 bg-gray-300 dark:bg-gray-600 rounded-full"></div>
                      <span>Rendering pages...</span>
                    </div>
                  </div>
                  
                  <!-- Netlify-specific note -->
                  <div class="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                    <p class="text-xs text-blue-700 dark:text-blue-300">
                      <Icon name="tabler:info-circle" class="w-3 h-3 inline mr-1" />
                      Large PDFs may take longer to load. If loading fails, use the download option.
                    </p>
                  </div>
                </div>
              </div>
              
              <!-- Error overlay with better fallback options -->
              <div id="error-overlay" class="hidden absolute inset-0 bg-white dark:bg-gray-800 bg-opacity-90 flex items-center justify-center">
                <div class="text-center max-w-lg mx-auto p-8">
                  <Icon name="tabler:alert-circle" class="w-16 h-16 text-red-500 mx-auto mb-4" />
                  <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">PDF Loading Failed</h2>
                  <p class="text-gray-600 dark:text-gray-300 mb-4">
                    The PDF file could not be loaded in the browser. This is common with large files on production servers.
                  </p>
                  
                  <!-- Alternative viewing options -->
                  <div class="space-y-3 mb-6">
                    <div class="p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                      <h3 class="font-medium text-gray-900 dark:text-white mb-2">Try these alternatives:</h3>
                      <ul class="text-sm text-gray-600 dark:text-gray-300 space-y-1">
                        <li>• Download and view locally</li>
                        <li>• Open in a new tab</li>
                        <li>• Use a different browser</li>
                        <li>• Check your internet connection</li>
                      </ul>
                    </div>
                  </div>
                  
                  <div class="flex flex-col sm:flex-row gap-3 justify-center">
                    <a 
                      href={`/documents/publications/${fileName}`}
                      target="_blank"
                      class="px-6 py-3 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors inline-flex items-center gap-2"
                    >
                      <Icon name="tabler:external-link" class="w-4 h-4" />
                      Open in New Tab
                    </a>
                    <a 
                      href={`/documents/publications/${fileName}`}
                      class="px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors inline-flex items-center gap-2"
                      download
                    >
                      <Icon name="tabler:download" class="w-4 h-4" />
                      Download PDF
                    </a>
                    <button 
                      id="retry-btn"
                      class="px-6 py-3 bg-gray-600 dark:bg-gray-500 text-white rounded-lg hover:bg-gray-700 dark:hover:bg-gray-600 transition-colors inline-flex items-center gap-2"
                    >
                      <Icon name="tabler:refresh" class="w-4 h-4" />
                      Retry
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div class="flex items-center justify-center h-full">
              <div class="text-center">
                <Icon name="tabler:file-text" class="w-16 h-16 text-gray-400 mx-auto mb-4" />
                <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">No PDF Selected</h2>
                <p class="text-gray-600 dark:text-gray-300 mb-4">Please select a PDF file to view</p>
                <a href="/publications" class="px-6 py-3 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors">
                  Go to Publications
                </a>
              </div>
            </div>
          )}
        </div>
      </div>
    </main>
  </div>
</PageLayout>

<script>
  if (typeof window !== 'undefined') {
    let currentIframe: HTMLIFrameElement | null = null;
    let currentLoadingOverlay: HTMLElement | null = null;
    let currentErrorOverlay: HTMLElement | null = null;
    let currentProgressBar: HTMLElement | null = null;
    let currentStep2: HTMLElement | null = null;
    let currentStep3: HTMLElement | null = null;
    let currentFileInfo: HTMLElement | null = null;
    let currentProgressInterval: ReturnType<typeof setInterval> | null = null;
    let currentFallbackTimeout: ReturnType<typeof setTimeout> | null = null;
    let currentQuickFallback: ReturnType<typeof setTimeout> | null = null;
    let currentTimeInterval: ReturnType<typeof setInterval> | null = null;
    
    const fullscreenBtn = document.getElementById('fullscreen-btn');
    const fullscreenBtnMobile = document.getElementById('fullscreen-btn-mobile');
    
    // Function to initialize PDF viewer for a specific file
    const initializePDFViewer = () => {
      // Clean up any existing intervals/timeouts
      if (currentProgressInterval) clearInterval(currentProgressInterval);
      if (currentFallbackTimeout) clearTimeout(currentFallbackTimeout);
      if (currentQuickFallback) clearTimeout(currentQuickFallback);
      if (currentTimeInterval) clearInterval(currentTimeInterval);
      
      // Get current elements
      const iframe = document.getElementById('pdf-iframe') as HTMLIFrameElement;
      const loadingOverlay = document.getElementById('loading-overlay');
      const errorOverlay = document.getElementById('error-overlay');
      const progressBar = document.getElementById('progress-bar');
      const step2 = document.getElementById('step-2');
      const step3 = document.getElementById('step-3');
      const fileInfo = document.getElementById('file-info');
      
      if (!iframe || !loadingOverlay) return;
      
      // Store references
      currentIframe = iframe;
      currentLoadingOverlay = loadingOverlay;
      currentErrorOverlay = errorOverlay;
      currentProgressBar = progressBar;
      currentStep2 = step2;
      currentStep3 = step3;
      currentFileInfo = fileInfo;
      
      // Get filename from URL path
      const pathSegments = window.location.pathname.split('/');
      const currentFileName = decodeURIComponent(pathSegments[pathSegments.length - 1]);
      
      if (!currentFileName) return;
      
      // Function to hide loading overlay
      const hideLoadingOverlay = () => {
        if (currentLoadingOverlay) {
          currentLoadingOverlay.style.opacity = '0';
          setTimeout(() => {
            if (currentLoadingOverlay) {
              currentLoadingOverlay.style.display = 'none';
            }
          }, 300);
        }
      };
      
      // Function to show error overlay
      const showErrorOverlay = () => {
        if (currentLoadingOverlay) currentLoadingOverlay.style.display = 'none';
        if (currentErrorOverlay) currentErrorOverlay.classList.remove('hidden');
      };
      
      // Simulate file size and load time
      const fileSizes = {
        'MEDICAL MINDSCAPE 1.pdf': '2.4 MB',
        'NUMSA Journal (3)_compressed_250420_022657.pdf': '1.8 MB',
        'NUMSA MAGAZINE 2 (1)_compressed_250420_022813.pdf': '3.1 MB'
      };
      
      const fileSize = fileSizes[currentFileName] || 'Unknown size';
      const estimatedTime = Math.floor(Math.random() * 3) + 2; // 2-4 seconds
      
      // Reset loading overlay
      if (currentLoadingOverlay) {
        currentLoadingOverlay.style.opacity = '1';
        currentLoadingOverlay.style.display = 'flex';
      }
      
      // Hide error overlay
      if (currentErrorOverlay) {
        currentErrorOverlay.classList.add('hidden');
      }
      
      // Update file info
      if (currentFileInfo) {
        currentFileInfo.textContent = `${fileSize} • Estimated load time: ${estimatedTime}s`;
        
        // Update loading time in real-time
        let elapsedTime = 0;
        currentTimeInterval = setInterval(() => {
          elapsedTime++;
          if (currentFileInfo) {
            currentFileInfo.textContent = `${fileSize} • Loading... ${elapsedTime}s`;
          }
        }, 1000);
      }
      
      // Reset progress bar
      if (currentProgressBar) {
        currentProgressBar.style.width = '0%';
      }
      
      // Reset steps
      if (currentStep2) {
        currentStep2.classList.add('opacity-50');
        currentStep2.querySelector('div')?.classList.remove('bg-blue-500', 'animate-pulse');
      }
      if (currentStep3) {
        currentStep3.classList.add('opacity-50');
        currentStep3.querySelector('div')?.classList.remove('bg-blue-500', 'animate-pulse', 'bg-green-500');
      }
      
      // Check if PDF file exists with timeout for Netlify
      const pdfUrl = `/documents/publications/${currentFileName}`;
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout for Netlify
      
      fetch(pdfUrl, { 
        method: 'HEAD',
        signal: controller.signal
      })
        .then(response => {
          clearTimeout(timeoutId);
          if (!response.ok) {
            console.log('PDF file not found, showing error overlay');
            showErrorOverlay();
          }
        })
        .catch(error => {
          clearTimeout(timeoutId);
          if (error.name === 'AbortError') {
            console.log('PDF check timed out (Netlify issue), proceeding with viewer');
            // Don't show error for timeout, let the viewer try to load
          } else {
            console.log('Error checking PDF file:', error);
          }
        });
      
      // Simple loading with timeout
      let progress = 0;
      currentProgressInterval = setInterval(() => {
        progress += 20; // Faster progress
        if (progress > 90) progress = 90;
        
        if (currentProgressBar) {
          currentProgressBar.style.width = `${progress}%`;
        }
        
        // Update steps
        if (progress > 30 && currentStep2) {
          currentStep2.classList.remove('opacity-50');
          currentStep2.querySelector('div')?.classList.add('bg-blue-500', 'animate-pulse');
        }
        if (progress > 60 && currentStep3) {
          currentStep3.classList.remove('opacity-50');
          currentStep3.querySelector('div')?.classList.add('bg-blue-500', 'animate-pulse');
        }
      }, 150); // Even faster progress updates
      
      // Simple timeout approach - hide loading after 1.5 seconds
      currentFallbackTimeout = setTimeout(() => {
        console.log('Simple timeout: Hiding loading overlay');
        if (currentProgressInterval) clearInterval(currentProgressInterval);
        hideLoadingOverlay();
      }, 1500);

      // Very quick fallback for navigation (0.2 seconds)
      currentQuickFallback = setTimeout(() => {
        console.log('Quick fallback: Hiding loading overlay for navigation');
        if (currentLoadingOverlay && currentLoadingOverlay.style.display !== 'none') {
          if (currentProgressInterval) clearInterval(currentProgressInterval);
          hideLoadingOverlay();
        }
      }, 200);
      
      // Simple iframe load detection
      const handleIframeLoad = () => {
        console.log('PDF loaded successfully');
        if (currentProgressInterval) clearInterval(currentProgressInterval);
        if (currentFallbackTimeout) clearTimeout(currentFallbackTimeout);
        if (currentQuickFallback) clearTimeout(currentQuickFallback);
        if (currentTimeInterval) clearInterval(currentTimeInterval);
        
        if (currentProgressBar) {
          currentProgressBar.style.width = '100%';
        }
        
        // Final step completion
        if (currentStep3) {
          currentStep3.querySelector('div')?.classList.remove('animate-pulse');
          currentStep3.querySelector('div')?.classList.add('bg-green-500');
        }
        
        // Hide overlay immediately
        hideLoadingOverlay();
      };
      
      // Simple event listener
      iframe.addEventListener('load', handleIframeLoad);
      
      // Simple error handling
      iframe.addEventListener('error', () => {
        console.log('PDF failed to load');
        if (currentProgressInterval) clearInterval(currentProgressInterval);
        if (currentFallbackTimeout) clearTimeout(currentFallbackTimeout);
        if (currentQuickFallback) clearTimeout(currentQuickFallback);
        showErrorOverlay();
      });
    }; // End of initializePDFViewer function
    
    // Initialize on page load
    initializePDFViewer();
    
    // Handle Astro navigation events for client-side routing
    document.addEventListener('astro:page-load', () => {
      console.log('Astro page load event detected');
      // Re-initialize PDF viewer on navigation
      setTimeout(() => {
        initializePDFViewer();
      }, 100); // Slight delay to ensure DOM is ready
    });
    
    // Handle browser navigation events
    window.addEventListener('popstate', () => {
      console.log('Browser navigation detected');
      // Re-initialize PDF viewer on navigation
      setTimeout(() => {
        initializePDFViewer();
      }, 100); // Slight delay to ensure DOM is ready
    });
    
    // Handle before navigation to prevent PDF flash
    document.addEventListener('astro:before-preparation', () => {
      console.log('Astro before preparation - cleaning up');
      // Immediately hide loading overlay to prevent flash
      if (currentLoadingOverlay) {
        currentLoadingOverlay.style.display = 'none';
      }
    });
    
    // Fullscreen logic
    if (fullscreenBtn && currentIframe) {
      fullscreenBtn.addEventListener('click', () => {
        if (currentIframe && currentIframe.requestFullscreen) {
          currentIframe.requestFullscreen();
        } else if (currentIframe && (currentIframe as any).webkitRequestFullscreen) {
          (currentIframe as any).webkitRequestFullscreen();
        }
      });
    }
    
    // Mobile fullscreen button
    if (fullscreenBtnMobile && currentIframe) {
      fullscreenBtnMobile.addEventListener('click', () => {
        if (currentIframe && currentIframe.requestFullscreen) {
          currentIframe.requestFullscreen();
        } else if (currentIframe && (currentIframe as any).webkitRequestFullscreen) {
          (currentIframe as any).webkitRequestFullscreen();
        }
      });
    }

    // Retry button logic
    const retryBtn = document.getElementById('retry-btn');
    if (retryBtn) {
      retryBtn.addEventListener('click', () => {
        console.log('Retry button clicked');
        // Hide error overlay and show loading
        if (currentErrorOverlay) {
          currentErrorOverlay.classList.add('hidden');
        }
        if (currentLoadingOverlay) {
          currentLoadingOverlay.style.display = 'flex';
          currentLoadingOverlay.style.opacity = '1';
        }
        // Re-initialize the viewer
        initializePDFViewer();
      });
    }
    
    // Cleanup function for navigation
    const cleanup = () => {
      if (currentLoadingOverlay) {
        currentLoadingOverlay.style.display = 'none';
      }
      if (currentProgressInterval) clearInterval(currentProgressInterval);
      if (currentFallbackTimeout) clearTimeout(currentFallbackTimeout);
      if (currentQuickFallback) clearTimeout(currentQuickFallback);
      if (currentTimeInterval) clearInterval(currentTimeInterval);
    };
    
    // Clean up on page unload
    window.addEventListener('beforeunload', cleanup);
  }
</script>