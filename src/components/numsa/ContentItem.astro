---
import type { ContentItem } from '../../types/numsa';
import { Icon } from 'astro-icon/components';
import Image from '../common/Image.astro';
import { findImage } from '../../utils/images';
import type { ImageMetadata } from 'astro';

export interface Props {
  item: ContentItem;
  contentType: string;
  layout?: 'grid' | 'list' | 'cards';
}

const { item, contentType, layout = 'grid' } = Astro.props;

// Get the appropriate image for the item
const imageSrc = item.image || item.mainImage;
const image = imageSrc ? await findImage(imageSrc) as ImageMetadata | undefined : undefined;

// Determine if we should show image based on layout and content type
const showImage = image && (layout === 'grid' || layout === 'cards' || contentType === 'campaigns' || contentType === 'outreaches');

// Get appropriate title
const displayTitle = item.title || item.position || 'Untitled';

// Get appropriate excerpt
const displayExcerpt = item.excerpt || item.caption || item.bio || '';

// Determine if this is a clickable item
const isClickable = item.link && item.link !== '#';
---

<article class={`content-item layout-${layout} ${isClickable ? 'clickable' : ''}`}>
  {showImage && (
    <div class="image-container">
      {isClickable ? (
        <a href={item.link} class="image-link group">
          <div class="image-wrapper">
            <Image
              src={image}
              class="content-image"
              width={layout === 'cards' ? 400 : 900}
              height={layout === 'cards' ? 300 : 600}
              sizes={layout === 'cards' ? '400px' : '(max-width: 900px) 400px, 900px'}
              alt={displayTitle}
              aspectRatio="16:9"
              loading="lazy"
              decoding="async"
            />
          </div>
        </a>
      ) : (
        <div class="image-wrapper">
          <Image
            src={image}
            class="content-image"
            width={layout === 'cards' ? 400 : 900}
            height={layout === 'cards' ? 300 : 600}
            sizes={layout === 'cards' ? '400px' : '(max-width: 900px) 400px, 900px'}
            alt={displayTitle}
            aspectRatio="16:9"
            loading="lazy"
            decoding="async"
          />
        </div>
      )}
    </div>
  )}
  
  <div class="content">
    <header>
      <h2 class="title">
        {isClickable ? (
          <a href={item.link} class="title-link">
            {displayTitle}
          </a>
        ) : (
          displayTitle
        )}
      </h2>
      
      {displayExcerpt && (
        <p class="excerpt">{displayExcerpt}</p>
      )}
    </header>

    <div class="meta">
      {item.date && (
        <span class="meta-item">
          <Icon name="tabler:clock" class="meta-icon" />
          <time datetime={item.date}>{item.date}</time>
        </span>
      )}
      
      {item.author && (
        <span class="meta-item">
          <Icon name="tabler:user" class="meta-icon" />
          <span>{item.author}</span>
        </span>
      )}
      
      {item.level && contentType === 'excos' && (
        <span class="meta-item">
                          <Icon name="tabler:school" class="meta-icon" />
          <span>{item.level} Level</span>
        </span>
      )}
      

    </div>
  </div>
</article>

<style>
  .content-item {
    @apply bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl shadow-sm hover:shadow-lg dark:hover:shadow-xl transition-all duration-300 overflow-hidden;
  }
  
  .content-item.clickable:hover {
    @apply transform -translate-y-1;
  }
  
  .image-container {
    @apply relative overflow-hidden;
  }
  
  .image-wrapper {
    @apply relative pb-[56.25%] md:pb-[75%] md:h-72 lg:pb-[56.25%] overflow-hidden bg-gray-400 dark:bg-slate-700;
  }
  
  .content-image {
    @apply absolute inset-0 object-cover w-full h-full rounded-t-xl;
  }
  
  .image-link:hover .content-image {
    @apply scale-105 transition-transform duration-300;
  }
  
  .content {
    @apply p-6;
  }
  
  .title {
    @apply text-xl sm:text-2xl font-bold leading-tight mb-2 font-heading dark:text-slate-300;
  }
  
  .title-link {
    @apply hover:text-primary dark:hover:text-blue-700 transition ease-in duration-200;
  }
  
  .excerpt {
    @apply text-gray-600 dark:text-gray-300 mb-4 line-clamp-3 leading-relaxed;
  }
  
  .meta {
    @apply flex flex-wrap items-center gap-3 text-sm text-gray-500 dark:text-gray-400;
  }
  
  .meta-item {
    @apply flex items-center gap-1;
  }
  
  .meta-icon {
    @apply w-3.5 h-3.5 inline-block -mt-0.5 dark:text-gray-400;
  }
  
  /* Layout-specific styles */
  .layout-cards .content {
    @apply p-4;
  }
  
  .layout-cards .title {
    @apply text-lg font-semibold;
  }
  
  .layout-cards .excerpt {
    @apply text-sm mb-3;
  }
  
  .layout-list .content-item {
    @apply flex flex-col md:flex-row gap-6;
  }
  
  .layout-list .image-container {
    @apply md:w-1/3;
  }
  
  .layout-list .content {
    @apply md:w-2/3;
  }
  
  /* Line clamp utility */
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Responsive adjustments */
  @media (max-width: 640px) {
    .layout-list .content-item {
      @apply flex-col;
    }
    
    .layout-list .image-container {
      @apply w-full;
    }
    
    .layout-list .content {
      @apply w-full;
    }
  }
</style>
